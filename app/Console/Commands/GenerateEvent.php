<?php

namespace App\Console\Commands;

use App\Models\Company;
use App\Models\Event;
use Illuminate\Console\Command;
use Carbon\Carbon;

class GenerateEvent extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'generate:event';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate a new event entry in the events table';

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        // Step 1: Input nama event
        $eventName = $this->ask('Event apa yang akan dibuat (nama event)?');

        // Step 2: Pilihan tipe event
        $eventType = $this->choice(
            'Apa tipe dari event tersebut?',
            ['AP', 'group', 'national', 'international'],
            0
        );

        // Step 3: Pilih company
        $companies = Company::all();
        $companyOptions = $companies->pluck('company_name', 'company_code')->toArray();
        $companyCode = $this->choice(
            'Pilih company untuk event ini:',
            $companyOptions
        );

        // Step 4: Input tanggal mulai dan akhir event
        $dateStart = $this->askWithValidation(
            'Masukkan tanggal mulai event (format: YYYY-MM-DD):',
            'Y-m-d'
        );

        $dateEnd = $this->askWithValidation(
            'Masukkan tanggal akhir event (format: YYYY-MM-DD):',
            'Y-m-d'
        );

        // Masukkan data ke database
        Event::create([
            'event_name' => $eventName,
            'company_code' => $companyCode,
            'date_start' => $dateStart,
            'date_end' => $dateEnd,
            'status' => 'active',
            'year' => now()->year,
            'description' => 'Generated by command',
            'type' => $eventType,
        ]);

        $this->info("Event '{$eventName}' berhasil dibuat.");
    }

    /**
     * Prompt for input with date validation.
     *
     * @param string $question
     * @param string $format
     * @return string
     */
    private function askWithValidation(string $question, string $format): string
    {
        $date = null;

        while (true) { // Perulangan hingga input valid
            $input = $this->ask($question);

            try {
                $date = Carbon::createFromFormat($format, $input);

                // Jika valid, keluar dari loop
                break;
            } catch (\Exception $e) {
                $this->warn("Format tanggal tidak valid. Gunakan format: {$format}");
            }
        }

        return $date->format('Y-m-d'); // Tipe $date pasti valid di sini
    }
}
